// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rest_network.proto

#ifndef PROTOBUF_rest_5fnetwork_2eproto__INCLUDED
#define PROTOBUF_rest_5fnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rest_network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rest_5fnetwork_2eproto();
void protobuf_AssignDesc_rest_5fnetwork_2eproto();
void protobuf_ShutdownFile_rest_5fnetwork_2eproto();

class ControlNetworkData;
class Telemetry;

enum run_mode {
  STOP = 0,
  TELEOP = 1,
  SAFE_AUTON = 2,
  FULL_AUTON = 3
};
bool run_mode_IsValid(int value);
const run_mode run_mode_MIN = STOP;
const run_mode run_mode_MAX = FULL_AUTON;
const int run_mode_ARRAYSIZE = run_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* run_mode_descriptor();
inline const ::std::string& run_mode_Name(run_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    run_mode_descriptor(), value);
}
inline bool run_mode_Parse(
    const ::std::string& name, run_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<run_mode>(
    run_mode_descriptor(), name, value);
}
// ===================================================================

class ControlNetworkData : public ::google::protobuf::Message {
 public:
  ControlNetworkData();
  virtual ~ControlNetworkData();

  ControlNetworkData(const ControlNetworkData& from);

  inline ControlNetworkData& operator=(const ControlNetworkData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlNetworkData& default_instance();

  void Swap(ControlNetworkData* other);

  // implements Message ----------------------------------------------

  ControlNetworkData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlNetworkData& from);
  void MergeFrom(const ControlNetworkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 joy_left = 1;
  inline bool has_joy_left() const;
  inline void clear_joy_left();
  static const int kJoyLeftFieldNumber = 1;
  inline ::google::protobuf::int32 joy_left() const;
  inline void set_joy_left(::google::protobuf::int32 value);

  // required sint32 joy_right = 2;
  inline bool has_joy_right() const;
  inline void clear_joy_right();
  static const int kJoyRightFieldNumber = 2;
  inline ::google::protobuf::int32 joy_right() const;
  inline void set_joy_right(::google::protobuf::int32 value);

  // required .rest_network.run_mode mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::rest_network::run_mode mode() const;
  inline void set_mode(::rest_network::run_mode value);

  // @@protoc_insertion_point(class_scope:rest_network.ControlNetworkData)
 private:
  inline void set_has_joy_left();
  inline void clear_has_joy_left();
  inline void set_has_joy_right();
  inline void clear_has_joy_right();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 joy_left_;
  ::google::protobuf::int32 joy_right_;
  int mode_;
  friend void  protobuf_AddDesc_rest_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_rest_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_rest_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static ControlNetworkData* default_instance_;
};
// -------------------------------------------------------------------

class Telemetry : public ::google::protobuf::Message {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  void Swap(Telemetry* other);

  // implements Message ----------------------------------------------

  Telemetry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // required sint32 right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // required .rest_network.run_mode current_mode = 3;
  inline bool has_current_mode() const;
  inline void clear_current_mode();
  static const int kCurrentModeFieldNumber = 3;
  inline ::rest_network::run_mode current_mode() const;
  inline void set_current_mode(::rest_network::run_mode value);

  // @@protoc_insertion_point(class_scope:rest_network.Telemetry)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_current_mode();
  inline void clear_has_current_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  int current_mode_;
  friend void  protobuf_AddDesc_rest_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_rest_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_rest_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static Telemetry* default_instance_;
};
// ===================================================================


// ===================================================================

// ControlNetworkData

// required sint32 joy_left = 1;
inline bool ControlNetworkData::has_joy_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlNetworkData::set_has_joy_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlNetworkData::clear_has_joy_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlNetworkData::clear_joy_left() {
  joy_left_ = 0;
  clear_has_joy_left();
}
inline ::google::protobuf::int32 ControlNetworkData::joy_left() const {
  // @@protoc_insertion_point(field_get:rest_network.ControlNetworkData.joy_left)
  return joy_left_;
}
inline void ControlNetworkData::set_joy_left(::google::protobuf::int32 value) {
  set_has_joy_left();
  joy_left_ = value;
  // @@protoc_insertion_point(field_set:rest_network.ControlNetworkData.joy_left)
}

// required sint32 joy_right = 2;
inline bool ControlNetworkData::has_joy_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlNetworkData::set_has_joy_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlNetworkData::clear_has_joy_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlNetworkData::clear_joy_right() {
  joy_right_ = 0;
  clear_has_joy_right();
}
inline ::google::protobuf::int32 ControlNetworkData::joy_right() const {
  // @@protoc_insertion_point(field_get:rest_network.ControlNetworkData.joy_right)
  return joy_right_;
}
inline void ControlNetworkData::set_joy_right(::google::protobuf::int32 value) {
  set_has_joy_right();
  joy_right_ = value;
  // @@protoc_insertion_point(field_set:rest_network.ControlNetworkData.joy_right)
}

// required .rest_network.run_mode mode = 3;
inline bool ControlNetworkData::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlNetworkData::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlNetworkData::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlNetworkData::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::rest_network::run_mode ControlNetworkData::mode() const {
  // @@protoc_insertion_point(field_get:rest_network.ControlNetworkData.mode)
  return static_cast< ::rest_network::run_mode >(mode_);
}
inline void ControlNetworkData::set_mode(::rest_network::run_mode value) {
  assert(::rest_network::run_mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:rest_network.ControlNetworkData.mode)
}

// -------------------------------------------------------------------

// Telemetry

// required sint32 left = 1;
inline bool Telemetry::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Telemetry::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Telemetry::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Telemetry::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 Telemetry::left() const {
  // @@protoc_insertion_point(field_get:rest_network.Telemetry.left)
  return left_;
}
inline void Telemetry::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:rest_network.Telemetry.left)
}

// required sint32 right = 2;
inline bool Telemetry::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Telemetry::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Telemetry::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Telemetry::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 Telemetry::right() const {
  // @@protoc_insertion_point(field_get:rest_network.Telemetry.right)
  return right_;
}
inline void Telemetry::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:rest_network.Telemetry.right)
}

// required .rest_network.run_mode current_mode = 3;
inline bool Telemetry::has_current_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Telemetry::set_has_current_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Telemetry::clear_has_current_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Telemetry::clear_current_mode() {
  current_mode_ = 0;
  clear_has_current_mode();
}
inline ::rest_network::run_mode Telemetry::current_mode() const {
  // @@protoc_insertion_point(field_get:rest_network.Telemetry.current_mode)
  return static_cast< ::rest_network::run_mode >(current_mode_);
}
inline void Telemetry::set_current_mode(::rest_network::run_mode value) {
  assert(::rest_network::run_mode_IsValid(value));
  set_has_current_mode();
  current_mode_ = value;
  // @@protoc_insertion_point(field_set:rest_network.Telemetry.current_mode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rest_network

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rest_network::run_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rest_network::run_mode>() {
  return ::rest_network::run_mode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rest_5fnetwork_2eproto__INCLUDED
