// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rest_network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rest_network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rest_network {

namespace {

const ::google::protobuf::Descriptor* ControlNetworkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlNetworkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* run_mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rest_5fnetwork_2eproto() {
  protobuf_AddDesc_rest_5fnetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rest_network.proto");
  GOOGLE_CHECK(file != NULL);
  ControlNetworkData_descriptor_ = file->message_type(0);
  static const int ControlNetworkData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlNetworkData, joy_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlNetworkData, joy_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlNetworkData, mode_),
  };
  ControlNetworkData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlNetworkData_descriptor_,
      ControlNetworkData::default_instance_,
      ControlNetworkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlNetworkData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlNetworkData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlNetworkData));
  Telemetry_descriptor_ = file->message_type(1);
  static const int Telemetry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, current_mode_),
  };
  Telemetry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_descriptor_,
      Telemetry::default_instance_,
      Telemetry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry));
  run_mode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rest_5fnetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlNetworkData_descriptor_, &ControlNetworkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_descriptor_, &Telemetry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rest_5fnetwork_2eproto() {
  delete ControlNetworkData::default_instance_;
  delete ControlNetworkData_reflection_;
  delete Telemetry::default_instance_;
  delete Telemetry_reflection_;
}

void protobuf_AddDesc_rest_5fnetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rest_network.proto\022\014rest_network\"_\n\022Co"
    "ntrolNetworkData\022\020\n\010joy_left\030\001 \002(\021\022\021\n\tjo"
    "y_right\030\002 \002(\021\022$\n\004mode\030\003 \002(\0162\026.rest_netwo"
    "rk.run_mode\"V\n\tTelemetry\022\014\n\004left\030\001 \002(\021\022\r"
    "\n\005right\030\002 \002(\021\022,\n\014current_mode\030\003 \002(\0162\026.re"
    "st_network.run_mode*@\n\010run_mode\022\010\n\004STOP\020"
    "\000\022\n\n\006TELEOP\020\001\022\016\n\nSAFE_AUTON\020\002\022\016\n\nFULL_AU"
    "TON\020\003", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rest_network.proto", &protobuf_RegisterTypes);
  ControlNetworkData::default_instance_ = new ControlNetworkData();
  Telemetry::default_instance_ = new Telemetry();
  ControlNetworkData::default_instance_->InitAsDefaultInstance();
  Telemetry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rest_5fnetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rest_5fnetwork_2eproto {
  StaticDescriptorInitializer_rest_5fnetwork_2eproto() {
    protobuf_AddDesc_rest_5fnetwork_2eproto();
  }
} static_descriptor_initializer_rest_5fnetwork_2eproto_;
const ::google::protobuf::EnumDescriptor* run_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return run_mode_descriptor_;
}
bool run_mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ControlNetworkData::kJoyLeftFieldNumber;
const int ControlNetworkData::kJoyRightFieldNumber;
const int ControlNetworkData::kModeFieldNumber;
#endif  // !_MSC_VER

ControlNetworkData::ControlNetworkData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rest_network.ControlNetworkData)
}

void ControlNetworkData::InitAsDefaultInstance() {
}

ControlNetworkData::ControlNetworkData(const ControlNetworkData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rest_network.ControlNetworkData)
}

void ControlNetworkData::SharedCtor() {
  _cached_size_ = 0;
  joy_left_ = 0;
  joy_right_ = 0;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlNetworkData::~ControlNetworkData() {
  // @@protoc_insertion_point(destructor:rest_network.ControlNetworkData)
  SharedDtor();
}

void ControlNetworkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlNetworkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlNetworkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlNetworkData_descriptor_;
}

const ControlNetworkData& ControlNetworkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rest_5fnetwork_2eproto();
  return *default_instance_;
}

ControlNetworkData* ControlNetworkData::default_instance_ = NULL;

ControlNetworkData* ControlNetworkData::New() const {
  return new ControlNetworkData;
}

void ControlNetworkData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ControlNetworkData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(joy_left_, mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlNetworkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rest_network.ControlNetworkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 joy_left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &joy_left_)));
          set_has_joy_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_joy_right;
        break;
      }

      // required sint32 joy_right = 2;
      case 2: {
        if (tag == 16) {
         parse_joy_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &joy_right_)));
          set_has_joy_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required .rest_network.run_mode mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rest_network::run_mode_IsValid(value)) {
            set_mode(static_cast< ::rest_network::run_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rest_network.ControlNetworkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rest_network.ControlNetworkData)
  return false;
#undef DO_
}

void ControlNetworkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rest_network.ControlNetworkData)
  // required sint32 joy_left = 1;
  if (has_joy_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->joy_left(), output);
  }

  // required sint32 joy_right = 2;
  if (has_joy_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->joy_right(), output);
  }

  // required .rest_network.run_mode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rest_network.ControlNetworkData)
}

::google::protobuf::uint8* ControlNetworkData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rest_network.ControlNetworkData)
  // required sint32 joy_left = 1;
  if (has_joy_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->joy_left(), target);
  }

  // required sint32 joy_right = 2;
  if (has_joy_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->joy_right(), target);
  }

  // required .rest_network.run_mode mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rest_network.ControlNetworkData)
  return target;
}

int ControlNetworkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 joy_left = 1;
    if (has_joy_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->joy_left());
    }

    // required sint32 joy_right = 2;
    if (has_joy_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->joy_right());
    }

    // required .rest_network.run_mode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlNetworkData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlNetworkData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlNetworkData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlNetworkData::MergeFrom(const ControlNetworkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joy_left()) {
      set_joy_left(from.joy_left());
    }
    if (from.has_joy_right()) {
      set_joy_right(from.joy_right());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlNetworkData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlNetworkData::CopyFrom(const ControlNetworkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlNetworkData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ControlNetworkData::Swap(ControlNetworkData* other) {
  if (other != this) {
    std::swap(joy_left_, other->joy_left_);
    std::swap(joy_right_, other->joy_right_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlNetworkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlNetworkData_descriptor_;
  metadata.reflection = ControlNetworkData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Telemetry::kLeftFieldNumber;
const int Telemetry::kRightFieldNumber;
const int Telemetry::kCurrentModeFieldNumber;
#endif  // !_MSC_VER

Telemetry::Telemetry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rest_network.Telemetry)
}

void Telemetry::InitAsDefaultInstance() {
}

Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rest_network.Telemetry)
}

void Telemetry::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  current_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:rest_network.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Telemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_descriptor_;
}

const Telemetry& Telemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rest_5fnetwork_2eproto();
  return *default_instance_;
}

Telemetry* Telemetry::default_instance_ = NULL;

Telemetry* Telemetry::New() const {
  return new Telemetry;
}

void Telemetry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Telemetry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, current_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rest_network.Telemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // required sint32 right = 2;
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_mode;
        break;
      }

      // required .rest_network.run_mode current_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_current_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rest_network::run_mode_IsValid(value)) {
            set_current_mode(static_cast< ::rest_network::run_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rest_network.Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rest_network.Telemetry)
  return false;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rest_network.Telemetry)
  // required sint32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }

  // required sint32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }

  // required .rest_network.run_mode current_mode = 3;
  if (has_current_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->current_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rest_network.Telemetry)
}

::google::protobuf::uint8* Telemetry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rest_network.Telemetry)
  // required sint32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }

  // required sint32 right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }

  // required .rest_network.run_mode current_mode = 3;
  if (has_current_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->current_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rest_network.Telemetry)
  return target;
}

int Telemetry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }

    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }

    // required .rest_network.run_mode current_mode = 3;
    if (has_current_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_current_mode()) {
      set_current_mode(from.current_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(current_mode_, other->current_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_descriptor_;
  metadata.reflection = Telemetry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rest_network

// @@protoc_insertion_point(global_scope)
